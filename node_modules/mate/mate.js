// Generated by CoffeeScript 1.9.1
(function() {
  var ArrayLazyWrapper, getter, mate, setter, web,
    indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; },
    slice = [].slice,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  mate = {};

  mate.packageInfo = require("./package.json");

  mate.environmentType = ((typeof process !== "undefined" && process !== null ? process.execPath : void 0) != null) && typeof process.execPath === "string" && process.execPath.search(/node/i) !== -1 ? "node" : (typeof window !== "undefined" && window !== null) && (typeof navigator !== "undefined" && navigator !== null) && (typeof HTMLElement !== "undefined" && HTMLElement !== null) ? "browser" : void 0;

  if (mate.environmentType === "browser") {
    window.global = window;
  }

  global.npmMate = mate;

  global.Test = require("wishlist").Test;

  global.compose = function(functions) {
    if (arguments.length > 1) {
      functions = Array.from(arguments);
    }
    return function() {
      var args, j, len, m;
      args = arguments;
      for (j = 0, len = functions.length; j < len; j++) {
        m = functions[j];
        args = [m.apply(this, args)];
      }
      return args[0];
    };
  };

  global.fail = function(errorMessage) {
    throw new Error(errorMessage);
  };

  global.assert = function(condition, message) {
    if (!condition) {
      return fail(message);
    }
  };

  global.repeat = function(iterator, times) {
    var i, j, ref, ref1, results1;
    if (typeof iterator === "number") {
      ref = [iterator, times], times = ref[0], iterator = ref[1];
    }
    results1 = [];
    for (i = j = 0, ref1 = times; 0 <= ref1 ? j < ref1 : j > ref1; i = 0 <= ref1 ? ++j : --j) {
      results1.push(iterator());
    }
    return results1;
  };

  global.spread = function(value, count) {
    var i, j, ref, results1;
    results1 = [];
    for (i = j = 0, ref = count; 0 <= ref ? j < ref : j > ref; i = 0 <= ref ? ++j : --j) {
      results1.push(value);
    }
    return results1;
  };

  getter = function(obj, prop, fun) {
    return Object.defineProperty(obj, prop, {
      get: fun,
      configurable: true
    });
  };

  setter = function(obj, prop, fun) {
    return Object.defineProperty(obj, prop, {
      set: fun,
      configurable: true
    });
  };

  global.eventField = function() {
    var f;
    f = function(method, arg) {
      if (typeof method === "function") {
        arg = method;
        method = "bind";
      }
      assert(typeof method === "string");
      f[method](arg);
      return this;
    };
    f._listeners = [];
    f.getListeners = function() {
      return f._listeners.clone();
    };
    f.bind = function(listener) {
      if (indexOf.call(f._listeners, listener) < 0) {
        f._listeners.push(listener);
      }
      return f;
    };
    f.unbind = function(listener) {
      f._listeners.removeAll(listener);
      return f;
    };
    f.unbindAll = function() {
      f._listeners = [];
      return f;
    };
    f.fire = function(arg) {
      var j, len, listener, ref;
      ref = f._listeners;
      for (j = 0, len = ref.length; j < len; j++) {
        listener = ref[j];
        if (arg != null ? arg.blocksListeners : void 0) {
          break;
        }
        listener(arg);
      }
      return f;
    };
    return f;
  };

  mate.EventedObject = (function() {
    function EventedObject() {
      this._eventList = {};
    }

    EventedObject.prototype.on = function(eventName, listener) {
      var base;
      if ((base = this._eventList)[eventName] == null) {
        base[eventName] = [];
      }
      if (indexOf.call(this._eventList[eventName], listener) < 0) {
        this._eventList[eventName].push(listener);
      }
      return this;
    };

    EventedObject.prototype.off = function(eventName, listener) {
      this._eventList[eventName].removeAll(listener);
      return this;
    };

    EventedObject.prototype.fire = function(eventName, arg) {
      var base, j, len, m, ref;
      if ((base = this._eventList)[eventName] == null) {
        base[eventName] = [];
      }
      ref = this._eventList[eventName];
      for (j = 0, len = ref.length; j < len; j++) {
        m = ref[j];
        m(arg);
      }
      return this;
    };

    EventedObject.prototype.listeners = function(eventName) {
      return this._eventList[eventName];
    };

    return EventedObject;

  })();

  ArrayLazyWrapper = (function() {
    function ArrayLazyWrapper(value, chainToCopy, itemToPush) {
      this._value = value;
      this._chain = (chainToCopy != null ? chainToCopy : []).slice(0);
      if (itemToPush != null) {
        this._chain.push(itemToPush);
      }
      getter(this, "length", (function(_this) {
        return function() {
          return _this.force().length;
        };
      })(this));
    }

    ArrayLazyWrapper.prototype.force = function() {
      var j, len, m, n, ref;
      n = this._value;
      ref = this._chain;
      for (j = 0, len = ref.length; j < len; j++) {
        m = ref[j];
        n = m.fun.apply(n, m.args);
      }
      return n;
    };

    ArrayLazyWrapper.prototype.map = function() {
      return this._pushChain(Array.prototype.map, arguments);
    };

    ArrayLazyWrapper.prototype.filter = function() {
      return this._pushChain(Array.prototype.filter, arguments);
    };

    ArrayLazyWrapper.prototype.concat = function() {
      return this._pushChain(Array.prototype.concat, arguments);
    };

    ArrayLazyWrapper.prototype.portion = function() {
      return this._pushChain(Array.prototype.portion, arguments);
    };

    ArrayLazyWrapper.prototype.funSort = function() {
      return this._pushChain(Array.prototype.funSort, arguments);
    };

    ArrayLazyWrapper.prototype.funSortDescending = function() {
      return this._pushChain(Array.prototype.funSortDescending, arguments);
    };

    ArrayLazyWrapper.prototype.funReverse = function() {
      return this._pushChain(Array.prototype.funReverse, arguments);
    };

    ArrayLazyWrapper.prototype.except = function() {
      return this._pushChain(Array.prototype.except, arguments);
    };

    ArrayLazyWrapper.prototype.distinct = function() {
      return this._pushChain(Array.prototype.distinct, arguments);
    };

    ArrayLazyWrapper.prototype.union = function() {
      return this._pushChain(Array.prototype.union, arguments);
    };

    ArrayLazyWrapper.prototype.intersect = function() {
      return this._pushChain(Array.prototype.intersect, arguments);
    };

    ArrayLazyWrapper.prototype.group = function() {
      return this._pushChain(Array.prototype.group, arguments);
    };

    ArrayLazyWrapper.prototype.flatten = function() {
      return this._pushChain(Array.prototype.flatten, arguments);
    };

    ArrayLazyWrapper.prototype.random = function() {
      return this._pushChain(Array.prototype.random, arguments);
    };

    ArrayLazyWrapper.prototype.some = function() {
      return this._unwrapAndDo(Array.prototype.some, arguments);
    };

    ArrayLazyWrapper.prototype.every = function() {
      return this._unwrapAndDo(Array.prototype.every, arguments);
    };

    ArrayLazyWrapper.prototype.isEmpty = function() {
      return this._unwrapAndDo(Array.prototype.isEmpty, arguments);
    };

    ArrayLazyWrapper.prototype.at = function() {
      return this._unwrapAndDo(Array.prototype.at, arguments);
    };

    ArrayLazyWrapper.prototype.atOrNull = function() {
      return this._unwrapAndDo(Array.prototype.atOrNull, arguments);
    };

    ArrayLazyWrapper.prototype.atOrVoid = function() {
      return this._unwrapAndDo(Array.prototype.atOrVoid, arguments);
    };

    ArrayLazyWrapper.prototype.contains = function() {
      return this._unwrapAndDo(Array.prototype.contains, arguments);
    };

    ArrayLazyWrapper.prototype.first = function() {
      return this._unwrapAndDo(Array.prototype.first, arguments);
    };

    ArrayLazyWrapper.prototype.firstOrNull = function() {
      return this._unwrapAndDo(Array.prototype.firstOrNull, arguments);
    };

    ArrayLazyWrapper.prototype.firstOrVoid = function() {
      return this._unwrapAndDo(Array.prototype.firstOrVoid, arguments);
    };

    ArrayLazyWrapper.prototype.last = function() {
      return this._unwrapAndDo(Array.prototype.last, arguments);
    };

    ArrayLazyWrapper.prototype.lastOrNull = function() {
      return this._unwrapAndDo(Array.prototype.lastOrNull, arguments);
    };

    ArrayLazyWrapper.prototype.lastOrVoid = function() {
      return this._unwrapAndDo(Array.prototype.lastOrVoid, arguments);
    };

    ArrayLazyWrapper.prototype.single = function() {
      return this._unwrapAndDo(Array.prototype.single, arguments);
    };

    ArrayLazyWrapper.prototype.singleOrNull = function() {
      return this._unwrapAndDo(Array.prototype.singleOrNull, arguments);
    };

    ArrayLazyWrapper.prototype.singleOrVoid = function() {
      return this._unwrapAndDo(Array.prototype.singleOrVoid, arguments);
    };

    ArrayLazyWrapper.prototype.withMax = function() {
      return this._unwrapAndDo(Array.prototype.withMax, arguments);
    };

    ArrayLazyWrapper.prototype.withMin = function() {
      return this._unwrapAndDo(Array.prototype.withMin, arguments);
    };

    ArrayLazyWrapper.prototype.max = function() {
      return this._unwrapAndDo(Array.prototype.max, arguments);
    };

    ArrayLazyWrapper.prototype.min = function() {
      return this._unwrapAndDo(Array.prototype.min, arguments);
    };

    ArrayLazyWrapper.prototype.sum = function() {
      return this._unwrapAndDo(Array.prototype.sum, arguments);
    };

    ArrayLazyWrapper.prototype.average = function() {
      return this._unwrapAndDo(Array.prototype.average, arguments);
    };

    ArrayLazyWrapper.prototype.median = function() {
      return this._unwrapAndDo(Array.prototype.median, arguments);
    };

    ArrayLazyWrapper.prototype.product = function() {
      return this._unwrapAndDo(Array.prototype.product, arguments);
    };

    ArrayLazyWrapper.prototype.randomOne = function() {
      return this._unwrapAndDo(Array.prototype.randomOne, arguments);
    };

    ArrayLazyWrapper.prototype._pushChain = function(fun, args) {
      return new ArrayLazyWrapper(this._value, this._chain, {
        fun: fun,
        args: args
      });
    };

    ArrayLazyWrapper.prototype._unwrapAndDo = function(fun, args) {
      return fun.apply(this.force(), args);
    };

    return ArrayLazyWrapper;

  })();

  Array._elementOrUseSelector = function(element, selector) {
    if (selector != null) {
      return selector(element);
    } else {
      return element;
    }
  };

  Array.prototype._ratioToIndex = function(ratio) {
    var r;
    r = Math.round(ratio * this.length - 0.5);
    if (r <= 0) {
      return 0;
    } else if (r > this.length - 1) {
      return this.length - 1;
    } else {
      return r;
    }
  };

  Array.prototype._ratioToLength = function(ratio) {
    var r;
    r = Math.round(ratio * (this.length + 1) - 0.5);
    if (r <= 0) {
      return 0;
    } else if (r > this.length) {
      return this.length;
    } else {
      return r;
    }
  };

  Array.prototype._reverseToIndex = function(reverseIndex) {
    return this.length - 1 - reverseIndex;
  };

  Array.prototype._positionToIndex = function(pos) {
    var ref;
    if (typeof pos === "number") {
      if ((0 < pos && pos < 1)) {
        pos = {
          Ratio: pos
        };
      } else if ((-1 < pos && pos < 0)) {
        pos = {
          Reverse: {
            Ratio: -pos
          }
        };
      } else if (pos < 0) {
        pos = {
          Reverse: -pos - 1
        };
      }
    }
    if (typeof pos === "number") {
      return pos;
    } else if ((pos != null ? (ref = pos.Reverse) != null ? ref.Ratio : void 0 : void 0) != null) {
      return this._reverseToIndex(this._ratioToIndex(pos.Reverse.Ratio));
    } else if ((pos != null ? pos.Reverse : void 0) != null) {
      return this._reverseToIndex(pos.Reverse);
    } else if ((pos != null ? pos.Ratio : void 0) != null) {
      return this._ratioToIndex(pos.Ratio);
    } else {
      return fail();
    }
  };

  Array.prototype._amountToLength = function(amount) {
    if (typeof amount === "number") {
      if ((0 < amount && amount < 1)) {
        amount = {
          Ratio: amount
        };
      }
    }
    if (typeof amount === "number") {
      return amount;
    } else if ((amount != null ? amount.Ratio : void 0) != null) {
      return this._ratioToLength(amount.Ratio);
    } else {
      return fail();
    }
  };

  Array.prototype.clone = function() {
    return this.slice(0);
  };

  Array.prototype.isEmpty = function() {
    return this.length === 0;
  };

  Array.prototype.lazy = function() {
    return ArrayLazyWrapper(this);
  };

  Array.prototype.portion = function(startIndex, length, endIndex) {
    startIndex = this._positionToIndex(startIndex);
    if (length != null) {
      length = this._amountToLength(length);
    }
    if (endIndex != null) {
      endIndex = this._positionToIndex(endIndex);
    }
    return this.slice(startIndex, length != null ? startIndex + length : endIndex + 1);
  };

  Array.prototype.at = function(index) {
    index = this._positionToIndex(index);
    assert(Number.isInteger(index) && (0 <= index && index < this.length));
    return this[index];
  };

  Array.prototype.atOrNull = function(index) {
    try {
      return this.at(index);
    } catch (_error) {
      return null;
    }
  };

  Array.prototype.atOrVoid = function(index) {
    try {
      return this.at(index);
    } catch (_error) {
      return void 0;
    }
  };

  Array.prototype.contains = function(value) {
    return indexOf.call(this, value) >= 0;
  };

  Array.prototype.first = function(predicate) {
    var queryResult;
    queryResult = predicate != null ? this.filter(predicate) : this;
    return queryResult.at(0);
  };

  Array.prototype.firstOrNull = function(predicate) {
    try {
      return this.first(predicate);
    } catch (_error) {
      return null;
    }
  };

  Array.prototype.firstOrVoid = function(predicate) {
    try {
      return this.first(predicate);
    } catch (_error) {
      return void 0;
    }
  };

  Array.prototype.last = function(predicate) {
    var queryResult;
    queryResult = predicate != null ? this.filter(predicate) : this;
    return queryResult.at(queryResult.length - 1);
  };

  Array.prototype.lastOrNull = function(predicate) {
    try {
      return this.last(predicate);
    } catch (_error) {
      return null;
    }
  };

  Array.prototype.lastOrVoid = function(predicate) {
    try {
      return this.last(predicate);
    } catch (_error) {
      return void 0;
    }
  };

  Array.prototype.single = function(predicate) {
    var queryResult;
    queryResult = predicate != null ? this.filter(predicate) : this;
    assert(queryResult.length === 1);
    return queryResult.at(0);
  };

  Array.prototype.singleOrNull = function(predicate) {
    try {
      return this.single(predicate);
    } catch (_error) {
      return null;
    }
  };

  Array.prototype.singleOrVoid = function(predicate) {
    try {
      return this.single(predicate);
    } catch (_error) {
      return void 0;
    }
  };

  Array.prototype.withMax = function(selector) {
    return this.reduce((function(_this) {
      return function(a, b, index) {
        if (Array._elementOrUseSelector(a, selector) > Array._elementOrUseSelector(b, selector)) {
          return a;
        } else {
          return b;
        }
      };
    })(this));
  };

  Array.prototype.withMin = function(selector) {
    return this.reduce((function(_this) {
      return function(a, b, index) {
        if (Array._elementOrUseSelector(a, selector) < Array._elementOrUseSelector(b, selector)) {
          return a;
        } else {
          return b;
        }
      };
    })(this));
  };

  Array.prototype.max = function(selector) {
    return Array._elementOrUseSelector(this.withMax(selector), selector);
  };

  Array.prototype.min = function(selector) {
    return Array._elementOrUseSelector(this.withMin(selector), selector);
  };

  Array.prototype.sum = function(selector) {
    if (this.length === 1) {
      return Array._elementOrUseSelector(this.first(), selector);
    } else {
      return this.reduce((function(_this) {
        return function(a, b, index) {
          return (index === 1 ? Array._elementOrUseSelector(a, selector) : a) + Array._elementOrUseSelector(b, selector);
        };
      })(this));
    }
  };

  Array.prototype.average = function(selector) {
    return this.sum(selector) / this.length;
  };

  Array.prototype.median = function(selector) {
    var a, b, m, n, sorted;
    sorted = this.funSort(selector);
    a = sorted.at(0.5 - Number.EPSILON);
    b = sorted.at(0.5 + Number.EPSILON);
    m = Array._elementOrUseSelector(a, selector);
    n = Array._elementOrUseSelector(b, selector);
    return (m + n) / 2;
  };

  Array.prototype.product = function(selector) {
    if (this.length === 1) {
      return Array._elementOrUseSelector(this.first(), selector);
    } else {
      return this.reduce((function(_this) {
        return function(a, b, index) {
          return (index === 1 ? Array._elementOrUseSelector(a, selector) : a) * Array._elementOrUseSelector(b, selector);
        };
      })(this));
    }
  };

  Array.prototype.group = function(keySelector, valueSelector) {
    var comparedKey, elements, j, key, len, m, results, sorted;
    if (this.isEmpty()) {
      return [];
    }
    sorted = this.funSort(keySelector);
    results = [];
    comparedKey = Array._elementOrUseSelector(sorted.first(), keySelector);
    elements = [];
    for (j = 0, len = sorted.length; j < len; j++) {
      m = sorted[j];
      key = Array._elementOrUseSelector(m, keySelector);
      if (key !== comparedKey) {
        results.push([comparedKey, Array._elementOrUseSelector(elements, valueSelector)]);
        comparedKey = key;
        elements = [];
      }
      elements.push(m);
    }
    results.push([comparedKey, Array._elementOrUseSelector(elements, valueSelector)]);
    return results;
  };

  Array.prototype._sort = function(keySelector, isDescending) {
    return this.clone().sort((function(_this) {
      return function(a, b) {
        var a1, b1;
        a1 = Array._elementOrUseSelector(a, keySelector);
        b1 = Array._elementOrUseSelector(b, keySelector);
        if (a1 < b1) {
          if (isDescending) {
            return 1;
          } else {
            return -1;
          }
        } else if (a1 > b1) {
          if (isDescending) {
            return -1;
          } else {
            return 1;
          }
        } else {
          return 0;
        }
      };
    })(this));
  };

  Array.prototype.funSort = function(keySelector) {
    return this._sort(keySelector, false);
  };

  Array.prototype.funSortDescending = function(keySelector) {
    return this._sort(keySelector, true);
  };

  Array.prototype.funReverse = function() {
    return this.clone().reverse();
  };

  Array.prototype.except = function(array, equalityComparer) {
    if (equalityComparer == null) {
      equalityComparer = (function(_this) {
        return function(a, b) {
          return a === b;
        };
      })(this);
    }
    return this.filter((function(_this) {
      return function(m) {
        return !array.some(function(n) {
          return equalityComparer(n, m);
        });
      };
    })(this));
  };

  Array.prototype.distinct = function(equalityComparer) {
    var r;
    if (equalityComparer == null) {
      equalityComparer = (function(_this) {
        return function(a, b) {
          return a === b;
        };
      })(this);
    }
    r = [];
    this.forEach((function(_this) {
      return function(m) {
        if (!r.some(function(n) {
          return equalityComparer(n, m);
        })) {
          return r.push(m);
        }
      };
    })(this));
    return r;
  };

  Array.prototype.union = function(arr, equalityComparer) {
    return this.concat(arr).distinct(equalityComparer);
  };

  Array.prototype.intersect = function(arr, equalityComparer) {
    var r;
    if (equalityComparer == null) {
      equalityComparer = (function(_this) {
        return function(a, b) {
          return a === b;
        };
      })(this);
    }
    r = [];
    this.distinct(equalityComparer).forEach((function(_this) {
      return function(m) {
        if (arr.some(function(n) {
          return equalityComparer(n, m);
        })) {
          return r.push(m);
        }
      };
    })(this));
    return r;
  };

  Array.prototype.flatten = function(level) {
    var canContinue, j, k, len, len1, m, n, r;
    if (level <= 0) {
      return fail();
    } else {
      r = [];
      canContinue = false;
      for (j = 0, len = this.length; j < len; j++) {
        m = this[j];
        if (Array.isArray(m)) {
          canContinue = true;
          for (k = 0, len1 = m.length; k < len1; k++) {
            n = m[k];
            r.push(n);
          }
        } else {
          r.push(m);
        }
      }
      if (canContinue) {
        if (level != null) {
          if (level === 1) {
            return r;
          } else {
            return r.flatten(level - 1);
          }
        } else {
          return r.flatten();
        }
      } else {
        return r;
      }
    }
  };

  Array.prototype.toObject = function() {
    var r;
    r = {};
    this.forEach((function(_this) {
      return function(element) {
        return r[element[0]] = element[1];
      };
    })(this));
    return r;
  };

  Array.prototype.deepJoin = function() {
    var args;
    args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
    if (args.length <= 1) {
      return this.join(args[0]);
    } else {
      return this.map((function(_this) {
        return function(arr) {
          return arr.deepJoin.apply(arr, args.slice(0, -1));
        };
      })(this)).join(args.last());
    }
  };

  Array.prototype.randomOne = function() {
    return this[Math.randomInt(this.length)];
  };

  Array.prototype.random = function(count) {
    return this.clone().takeRandom(count);
  };

  Array.prototype.takeRandomOne = function() {
    var index, r;
    index = Math.randomInt(this.length);
    r = this[index];
    this.removeAt(index);
    return r;
  };

  Array.prototype.takeRandom = function(count) {
    if (count == null) {
      count = this.length;
    }
    count = this._amountToLength(count);
    return repeat(count, (function(_this) {
      return function() {
        return _this.takeRandomOne();
      };
    })(this));
  };

  Array.prototype.removeAt = function(index) {
    this.splice(index, 1);
    return this;
  };

  Array.prototype.remove = function(element) {
    var index;
    index = this.indexOf(element);
    assert(index > -1);
    return this.removeAt(index);
  };

  Array.prototype.removeAll = function(element) {
    var index;
    while (true) {
      index = this.indexOf(element);
      if (index === -1) {
        break;
      }
      this.removeAt(index);
    }
    return this;
  };

  Array.prototype.removeMatch = function(predicate) {
    var index;
    index = this.findIndex(predicate);
    assert(index > -1);
    return this.removeAt(index);
  };

  Array.prototype.removeAllMatch = function(predicate) {
    var index;
    while (true) {
      index = this.findIndex(predicate);
      if (index === -1) {
        break;
      }
      this.removeAt(index);
    }
    return this;
  };

  if (String.prototype.contains === void 0) {
    String.prototype.contains = String.prototype.includes;
  }

  if (global.setImmediate === void 0) {
    global.setImmediate = function(callback, args) {
      return setTimeout(callback, 0, args);
    };
  }

  if (global.clearImmediate === void 0) {
    global.clearImmediate = clearTimeout;
  }

  Math.approxEquals = function(a, b) {
    var ref, threshold;
    threshold = 1 + 1 / 8388608;
    return (1 / threshold < (ref = a / b) && ref < threshold);
  };

  Math.approxGreaterThan = function(a, b) {
    return a > b || Math.approxEquals(a, b);
  };

  Math.approxLessThan = function(a, b) {
    return a < b || Math.approxEquals(a, b);
  };

  Math.radiansToDegrees = function(radians) {
    return radians / Math.PI * 180;
  };

  Math.degreesToRadians = function(degrees) {
    return degrees / 180 * Math.PI;
  };

  Math.principalRadians = function(radians) {
    var t;
    t = radians % (2 * Math.PI);
    if (t <= -Math.PI) {
      return t + 2 * Math.PI;
    } else if (t > Math.PI) {
      return t - 2 * Math.PI;
    } else {
      return t;
    }
  };

  Math.principalDegrees = function(degrees) {
    var t;
    t = degrees % 360;
    if (t <= -180) {
      return t + 360;
    } else if (t > 180) {
      return t - 360;
    } else {
      return t;
    }
  };

  Math.roundDecimal = function(x, digitCount) {
    var factor;
    if (digitCount == null) {
      digitCount = 0;
    }
    factor = Math.pow(10, digitCount);
    return Math.round(x * factor) / factor;
  };

  Math.randomNumber = function(m, n) {
    if (m < n) {
      return m + Math.random() * (n - m);
    } else {
      return fail();
    }
  };

  Math.randomInt = function(m, n) {
    var max, min;
    min = n === void 0 ? 0 : m;
    max = n === void 0 ? m : n;
    return Math.floor(Math.randomNumber(min, max));
  };

  global.Point = (function() {
    function Point(x1, y1) {
      this.x = x1;
      this.y = y1;
    }

    Point.from = function(value, second) {
      if (typeof value === "number") {
        if (typeof second === "number") {
          return new Point(value, second);
        } else {
          return new Point(value, 0);
        }
      } else if (value instanceof Point) {
        return value.clone();
      } else if (typeof value === "string") {
        return Point.fromString(value);
      } else if (Array.isArray(value)) {
        return Point.fromArray(value);
      } else {
        return fail();
      }
    };

    Point.fromArray = function(array) {
      return new Point(array[0], array[1]);
    };

    Point.fromString = function(s) {
      var adjustedString, complexMatch, imaginary, normalMatch, real, ref, ref1;
      adjustedString = s.replace(/[\x20()]/g, "");
      normalMatch = adjustedString.match(/^([^,]*),(.*)$/);
      if (normalMatch != null) {
        return new Point(Number.parseFloatExt(normalMatch[1]), Number.parseFloatExt(normalMatch[2]));
      } else {
        complexMatch = adjustedString.match(/^([+-]?[0-9]*\.?[0-9]*(?:[Ee][+-]?[0-9]+)?(?![i0-9Ee.]))?(?:([+-]?[0-9]*\.?[0-9]*(?:[Ee][+-]?[0-9]+)?)i)?$/);
        if (complexMatch != null) {
          real = (ref = complexMatch[1]) != null ? ref : "0";
          imaginary = (ref1 = complexMatch[2]) != null ? ref1 : "0";
          if (real === "") {
            real = "1";
          }
          if (imaginary === "") {
            imaginary = "1";
          }
          if (real === "+") {
            real = "1";
          }
          if (imaginary === "+") {
            imaginary = "1";
          }
          if (real === "-") {
            real = "-1";
          }
          if (imaginary === "-") {
            imaginary = "-1";
          }
          return new Point(parseFloat(real), parseFloat(imaginary));
        } else {
          return fail();
        }
      }
    };

    Point.fromPolar = function(r, angle) {
      return new Point(r * Math.cos(angle), r * Math.sin(angle));
    };

    Point.fromPolarInDegrees = function(r, angle) {
      switch (Math.principalDegrees(angle)) {
        case 0:
          return new Point(r, 0);
        case 90:
          return new Point(0, r);
        case -90:
          return new Point(0, -r);
        case 180:
          return new Point(-r, 0);
        default:
          return Point.fromPolar(r, Math.degreesToRadians(angle));
      }
    };

    Point.prototype.real = function() {
      return this.x;
    };

    Point.prototype.imaginary = function() {
      return this.y;
    };

    Point.prototype.toString = function() {
      return "(" + this.x + "," + this.y + ")";
    };

    Point.prototype.toComplexString = function() {
      var sign;
      sign = this.y >= 0 ? "+" : "-";
      return "" + this.x + sign + (Math.abs(this.y)) + "i";
    };

    Point.prototype.clone = function() {
      return new Point(this.x, this.y);
    };

    Point.prototype.equals = function(p) {
      return cmath.equals(this, p);
    };

    Point.prototype.approxEquals = function(p) {
      return cmath.approxEquals(this, p);
    };

    Point.prototype.opposite = function() {
      return cmath.opposite(this);
    };

    Point.prototype.reciprocal = function() {
      return cmath.reciprocal(this);
    };

    Point.prototype.conjugate = function() {
      return cmath.conjugate(this);
    };

    Point.prototype.abs = function() {
      return cmath.abs(this);
    };

    Point.prototype.add = function(p) {
      return cmath.add(this, p);
    };

    Point.prototype.subtract = function(p) {
      return cmath.subtract(this, p);
    };

    Point.prototype.multiply = function(p) {
      return cmath.multiply(this, p);
    };

    Point.prototype.divide = function(p) {
      return cmath.divide(this, p);
    };

    Point.prototype.distance = function(p) {
      return cmath.distance(this, p);
    };

    Point.prototype.dotProduct = function(p) {
      p = Point.from(p);
      return this.x * p.x + this.y * p.y;
    };

    Point.prototype.crossProduct = function(p) {
      p = Point.from(p);
      return this.x * p.y - this.y * p.x;
    };

    Point.prototype.isOppositeTo = function(p) {
      return this.opposite().equals(p);
    };

    Point.prototype.phase = function() {
      return cmath.phase(this);
    };

    Point.prototype.phaseTo = function(p) {
      p = Point.from(p);
      return Math.principalRadians(p.phase() - this.phase());
    };

    Point.prototype.phaseInDegrees = function() {
      return cmath.phaseInDegrees(this);
    };

    Point.prototype.phaseInDegreesTo = function(p) {
      p = Point.from(p);
      return Math.principalDegrees(p.phaseInDegrees() - this.phaseInDegrees());
    };

    Point.prototype.scale = function(size) {
      size = Point.from(size);
      return new Point(this.x * size.x, this.y * size.y);
    };

    Point.prototype.rotate = function(angle) {
      return this.multiply(Point.fromPolar(1, angle));
    };

    Point.prototype.rotateDegrees = function(angle) {
      return this.multiply(Point.fromPolarInDegrees(1, angle));
    };

    return Point;

  })();

  global.cmath = {
    equals: function(a, b) {
      a = Point.from(a);
      b = Point.from(b);
      return a.x === b.x && a.y === b.y;
    },
    approxEquals: function(a, b) {
      a = Point.from(a);
      b = Point.from(b);
      return a.x.approxEquals(b.x) && a.y.approxEquals(b.y);
    },
    opposite: function(p) {
      p = Point.from(p);
      return new Point(-p.x, -p.y);
    },
    reciprocal: function(p) {
      var n;
      p = Point.from(p);
      n = p.x * p.x + p.y * p.y;
      return new Point(p.x / n, -p.y / n);
    },
    conjugate: function(p) {
      p = Point.from(p);
      return new Point(p.x, -p.y);
    },
    abs: function(p) {
      p = Point.from(p);
      if (p.x === 0) {
        return Math.abs(p.y);
      } else if (p.y === 0) {
        return Math.abs(p.x);
      } else {
        return Math.sqrt(p.x * p.x + p.y * p.y);
      }
    },
    phase: function(p) {
      p = Point.from(p);
      return Math.atan2(p.y, p.x);
    },
    phaseInDegrees: function(p) {
      var d;
      p = Point.from(p);
      if (p.x === 0 && p.y === 0) {
        return 0;
      } else if (p.x === 0 && p.y > 0) {
        return 90;
      } else if (p.x === 0 && p.y < 0) {
        return -90;
      } else if (p.x > 0 && p.y === 0) {
        return 0;
      } else if (p.x < 0 && p.y === 0) {
        return 180;
      } else {
        d = Math.radiansToDegrees(cmath.phase(p));
        if (d <= -180) {
          return 180;
        } else {
          return d;
        }
      }
    },
    add: function(a, b) {
      a = Point.from(a);
      b = Point.from(b);
      return new Point(a.x + b.x, a.y + b.y);
    },
    subtract: function(a, b) {
      return cmath.add(a, cmath.opposite(b));
    },
    multiply: function(a, b) {
      a = Point.from(a);
      b = Point.from(b);
      return new Point(a.x * b.x - a.y * b.y, a.x * b.y + a.y * b.x);
    },
    divide: function(a, b) {
      return cmath.multiply(a, cmath.reciprocal(b));
    },
    distance: function(a, b) {
      return cmath.abs(cmath.subtract(a, b));
    },
    exp: function(p) {
      p = Point.from(p);
      return Point.fromPolar(Math.exp(p.x), p.y);
    },
    log: function(p) {
      return new Point(Math.log(cmath.abs(p)), cmath.phase(p));
    },
    pow: function(a, b) {
      return cmath.exp(cmath.multiply(cmath.log(a), b));
    },
    sqrt: function(p) {
      var r;
      p = Point.from(p);
      r = cmath.abs(p);
      return new Point(Math.sqrt((r + p.x) / 2), Math.sign(p.y) * Math.sqrt((r - p.x) / 2));
    },
    cos: function(p) {
      return cmath.divide(cmath.add(cmath.exp(cmath.multiply(p, new Point(0, 1))), cmath.exp(cmath.multiply(cmath.opposite(p), new Point(0, 1)))), 2);
    },
    sin: function(p) {
      return cmath.divide(cmath.subtract(cmath.exp(cmath.multiply(p, new Point(0, 1))), cmath.exp(cmath.multiply(cmath.opposite(p), new Point(0, 1)))), new Point(0, 2));
    },
    tan: function(p) {
      return cmath.divide(cmath.sin(p), cmath.cos(p));
    },
    acos: function(p) {
      return cmath.opposite(cmath.multiply(cmath.log(cmath.add(p, cmath.multiply(cmath.sqrt(cmath.add(cmath.opposite(cmath.multiply(p, p)), 1)), new Point(0, 1)))), new Point(0, 1)));
    },
    asin: function(p) {
      return cmath.opposite(cmath.multiply(cmath.log(cmath.add(cmath.multiply(p, new Point(0, 1)), cmath.sqrt(cmath.add(cmath.opposite(cmath.multiply(p, p)), 1)))), new Point(0, 1)));
    },
    atan: function(p) {
      return cmath.multiply(cmath.subtract(cmath.log(cmath.subtract(1, cmath.multiply(p, new Point(0, 1)))), cmath.log(cmath.add(1, cmath.multiply(p, new Point(0, 1))))), new Point(0, 0.5));
    }
  };

  JSON.clone = function(x) {
    return JSON.parse(JSON.stringify(x));
  };

  Date.prototype.add = function(x) {
    return new Date(this - (-x));
  };

  Date.prototype.subtract = function(x) {
    if (typeof x === "number") {
      return new Date(this - x);
    } else {
      return this - x;
    }
  };

  Date.prototype.equals = function(x) {
    return (x <= this && this <= x);
  };

  console.logt = function() {
    return console.log.apply(console, [new Date().toISOString()].concat(Array.from(arguments)));
  };

  Number.isFraction = function(x) {
    return typeof x === "number" && isFinite(x) && Math.floor(x) !== x;
  };

  Number.parseFloatExt = function(s) {
    return parseFloat(s) * (s.endsWith("%") ? 0.01 : 1);
  };

  Number.prototype.approxEquals = function(x) {
    return Math.approxEquals(this.valueOf(), x);
  };

  Number.prototype.approxGreaterThan = function(x) {
    return Math.approxGreaterThan(this.valueOf(), x);
  };

  Number.prototype.approxLessThan = function(x) {
    return Math.approxLessThan(this.valueOf(), x);
  };

  Number.prototype.pad = function(integerSize, fractionalSize) {
    return this.valueOf().format({
      integerSize: integerSize,
      fractionalSize: fractionalSize
    });
  };

  Number.prototype.format = function(options) {
    var ePos, forcesSign, fractionalGroupEnabled, fractionalGroupSeparator, fractionalGroupSize, fractionalSize, integerGroupEnabled, integerGroupSeparator, integerGroupSize, integerSize, isNegative, radix, ref, ref1, ref2, ref3, ref4, ref5, ref6, ref7, ref8, ref9, s, t, x;
    integerSize = (ref = options != null ? options.integerSize : void 0) != null ? ref : 1;
    fractionalSize = (ref1 = options != null ? options.fractionalSize : void 0) != null ? ref1 : 0;
    forcesSign = (ref2 = options != null ? options.forcesSign : void 0) != null ? ref2 : false;
    radix = (ref3 = options != null ? options.radix : void 0) != null ? ref3 : 10;
    integerGroupEnabled = (ref4 = options != null ? options.integerGroupEnabled : void 0) != null ? ref4 : false;
    integerGroupSeparator = (ref5 = options != null ? options.integerGroupSeparator : void 0) != null ? ref5 : ",";
    integerGroupSize = (ref6 = options != null ? options.integerGroupSize : void 0) != null ? ref6 : 3;
    fractionalGroupEnabled = (ref7 = options != null ? options.fractionalGroupEnabled : void 0) != null ? ref7 : false;
    fractionalGroupSeparator = (ref8 = options != null ? options.fractionalGroupSeparator : void 0) != null ? ref8 : " ";
    fractionalGroupSize = (ref9 = options != null ? options.fractionalGroupSize : void 0) != null ? ref9 : 3;
    if (radix !== 10) {
      fractionalSize = 0;
    }
    x = this.valueOf();
    if (integerSize > 80 || fractionalSize > 20 || x >= 1e21 || x <= -1e21 || integerGroupSize < 1 || fractionalGroupSize < 1) {
      fail("Number or argument out of range");
    }
    s = radix === 10 ? (t = Math.roundDecimal(x, fractionalSize).toString(), ePos = t.indexOf("e"), ePos === -1 ? t : t[ePos + 1] === "+" ? fail("Number too large") : x.toFixed(fractionalSize)) : Math.round(x).toString(radix);
    isNegative = s[0] === "-";
    if (s[0] === "+" || s[0] === "-") {
      s = s.remove(0);
    }
    (function(_this) {
      return (function() {
        var fractionalMissing, integerMissing, pos, rawFractionalSize, rawIntegerSize;
        pos = s.indexOf(".");
        rawIntegerSize = pos === -1 ? s.length : pos;
        integerMissing = Math.max(integerSize - rawIntegerSize, 0);
        rawFractionalSize = pos === -1 ? 0 : s.length - 1 - pos;
        fractionalMissing = fractionalSize - rawFractionalSize;
        s = s.substr(0, s.length + fractionalMissing);
        if (s[s.length - 1] === ".") {
          s = s.substr(0, s.length - 1);
        }
        if (pos === -1 && fractionalSize > 0) {
          s += ".";
        }
        return s = "0".repeat(integerMissing) + s + "0".repeat(Math.max(fractionalMissing, 0));
      });
    })(this)();
    if (integerGroupEnabled || fractionalGroupEnabled) {
      (function(_this) {
        return (function() {
          var fractionalStart, i, integerStart, pos;
          pos = s.indexOf(".");
          if (fractionalGroupEnabled) {
            fractionalStart = (pos === -1 ? s.length : pos) + 1 + fractionalGroupSize;
            ((function() {
              var j, ref10, ref11, ref12, results1;
              results1 = [];
              for (i = j = ref10 = fractionalStart, ref11 = s.length - 1, ref12 = fractionalGroupSize; ref12 > 0 ? j <= ref11 : j >= ref11; i = j += ref12) {
                results1.push(i);
              }
              return results1;
            })()).funReverse().forEach(function(i) {
              return s = s.insert(i, fractionalGroupSeparator);
            });
          }
          if (integerGroupEnabled) {
            integerStart = (pos === -1 ? s.length : pos) - integerGroupSize;
            return ((function() {
              var j, ref10, ref11, results1;
              results1 = [];
              for (i = j = ref10 = integerStart, ref11 = -integerGroupSize; ref11 > 0 ? j <= 1 : j >= 1; i = j += ref11) {
                results1.push(i);
              }
              return results1;
            })()).forEach(function(i) {
              return s = s.insert(i, integerGroupSeparator);
            });
          }
        });
      })(this)();
    }
    if (forcesSign) {
      if (isNegative) {
        s = "-" + s;
      } else {
        s = "+" + s;
      }
    } else {
      if (isNegative) {
        s = "-" + s;
      }
    }
    return s;
  };

  Object.isObject = function(x) {
    var ref;
    return ((ref = typeof x) === "object" || ref === "function") && x !== null;
  };

  Object.isNormalObject = function(x) {
    return Object.isObject(x) && typeof x !== "function" && !Array.isArray(x);
  };

  Object.clone = function(x) {
    var j, key, len, ref, y;
    y = {};
    ref = Object.keys(x);
    for (j = 0, len = ref.length; j < len; j++) {
      key = ref[j];
      y[key] = x[key];
    }
    return y;
  };

  Object.allKeys = function(x) {
    var key, results1;
    results1 = [];
    for (key in x) {
      results1.push(key);
    }
    return results1;
  };

  Object.keyValues = function(x) {
    return Object.keys(x).map(function(key) {
      return [key, x[key]];
    });
  };

  Object.allKeyValues = function(x) {
    return Object.allKeys(x).map(function(key) {
      return [key, x[key]];
    });
  };

  Object.forEach = function(x, callback) {
    return Object.keys(x).forEach(function(key) {
      return callback(key, x[key]);
    });
  };

  Object.forEachOfAll = function(x, callback) {
    return Object.allKeys(x).forEach(function(key) {
      return callback(key, x[key]);
    });
  };

  Object.deepAssign = function() {
    var sources, target;
    target = arguments[0], sources = 2 <= arguments.length ? slice.call(arguments, 1) : [];
    sources.forEach(function(source) {
      var deepAssign;
      deepAssign = function(target, source) {
        return Object.forEach(source, function(key, value) {
          if (Object.isObject(value) && !Array.isArray(value) && Object.isObject(target[key]) && !Array.isArray(target[key])) {
            return deepAssign(target[key], value);
          } else {
            return target[key] = Object.deepClone(value);
          }
        });
      };
      return deepAssign(target, source);
    });
    return target;
  };

  Object.absorb = function() {
    var objects, subject;
    subject = arguments[0], objects = 2 <= arguments.length ? slice.call(arguments, 1) : [];
    objects.forEach(function(object) {
      return Object.forEach(object, function(key, value) {
        if (subject[key] === void 0) {
          return subject[key] = value;
        }
      });
    });
    return subject;
  };

  Object.deepAbsorb = function() {
    var objects, subject;
    subject = arguments[0], objects = 2 <= arguments.length ? slice.call(arguments, 1) : [];
    objects.forEach(function(object) {
      var deepAbsorb;
      deepAbsorb = function(subject, object) {
        return Object.forEach(object, function(key, value) {
          if (Object.isObject(value) && !Array.isArray(value) && Object.isObject(subject[key]) && !Array.isArray(subject[key])) {
            return deepAbsorb(subject[key], value);
          } else {
            if (subject[key] === void 0) {
              return subject[key] = Object.deepClone(value);
            }
          }
        });
      };
      return deepAbsorb(subject, object);
    });
    return subject;
  };

  Object.deepClone = function(x) {
    var deepCopyFrom, target;
    if (Object.isObject(x)) {
      target = Array.isArray(x) ? [] : {};
      deepCopyFrom = function(target, source) {
        return Object.forEach(source, function(key, value) {
          if (Object.isObject(value)) {
            target[key] = Array.isArray(value) ? [] : {};
            return deepCopyFrom(target[key], value);
          } else {
            return target[key] = value;
          }
        });
      };
      deepCopyFrom(target, x);
      return target;
    } else {
      return x;
    }
  };

  String.prototype.format = function() {
    var cur, i, m, next, s;
    s = this.valueOf();
    m = [];
    i = 0;
    while (i < s.length) {
      cur = s[i];
      next = s[i + 1];
      if (cur === "{" && next === "{") {
        m.push("{", "");
        i++;
      } else if (cur === "}" && next === "}") {
        m.push("}", "");
        i++;
      } else if (cur === "{" && next >= "0" && next <= "9" && s[i + 2] === "}") {
        m.push(arguments[parseInt(next, 10)].toString(), "", "");
        i += 2;
      } else {
        m.push(cur);
      }
      i++;
    }
    return m.join("");
  };

  String.prototype.insert = function(index, value) {
    var s;
    s = this.valueOf();
    return s.substr(0, index) + value + s.substr(index);
  };

  String.prototype.remove = function(start, length) {
    var s;
    if (length == null) {
      length = 1;
    }
    s = this.valueOf();
    return s.substr(0, start) + s.substr(start + length);
  };

  String.prototype.matches = function(regex) {
    var adjustedRegex, match, result;
    adjustedRegex = new RegExp(regex.source, "g");
    result = [];
    while (true) {
      match = adjustedRegex.exec(this.valueOf());
      if (match != null) {
        result.push(match);
      } else {
        break;
      }
    }
    return result;
  };

  String.prototype.capitalize = function() {
    return this.charAt(0).toUpperCase() + this.substr(1);
  };

  String.prototype.deepSplit = function() {
    var args, arr;
    args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
    arr = this.split(args[0]);
    if (args.length === 2 && typeof args[1] === "number") {
      if (args[1] === 0) {
        return [arr.join(args[0])];
      } else if (args[1] <= arr.length - 2) {
        return arr.slice(0, +(args[1] - 1) + 1 || 9e9).concat([arr.slice(args[1]).join(args[0])]);
      } else {
        return arr;
      }
    } else if (args.length <= 1) {
      return arr;
    } else {
      return arr.map((function(_this) {
        return function(s) {
          return s.deepSplit.apply(s, args.slice(1));
        };
      })(this));
    }
  };

  String.prototype.stripTrailingNewline = function() {
    if (this[this.length - 2] === "\r" && this[this.length - 1] === "\n") {
      return this.substr(0, this.length - 2);
    } else if (this[this.length - 1] === "\n") {
      return this.substr(0, this.length - 1);
    } else {
      return this.valueOf();
    }
  };

  String.prototype.ensureTrailingNewline = function() {
    if (this[this.length - 1] !== "\n") {
      return this.valueOf() + "\n";
    } else {
      return this.valueOf();
    }
  };

  Date.Timer = (function() {
    Timer._endOfTime = new Date("9999-12-30T00:00:00Z");

    Timer._precision = 30;

    Timer._enable = function() {
      return this._internalTimer != null ? this._internalTimer : this._internalTimer = setInterval((function(_this) {
        return function() {
          return _this._onCheck.fire();
        };
      })(this), this._precision);
    };

    Timer._disable = function() {
      if (this._internalTimer != null) {
        clearInterval(this._internalTimer);
      }
      return this._internalTimer = null;
    };

    Timer.setPrecision = function(precision) {
      if (this._internalTimer != null) {
        this._disable();
        this._precision = precision;
        this._enable();
      } else {
        this._precision = precision;
      }
      return void 0;
    };

    Timer.getPrecision = function() {
      return this._precision;
    };

    Timer._onCheck = eventField();

    function Timer(options) {
      var ref, ref1;
      this.targetTime = (ref = options != null ? options.targetTime : void 0) != null ? ref : Date.Timer._endOfTime;
      this.allowsEqual = (ref1 = options != null ? options.allowsEqual : void 0) != null ? ref1 : true;
      this._counter = 0;
      this._running = false;
      this.onArrive = eventField();
      this.run();
    }

    Timer.prototype.run = function() {
      if (this._running) {
        return this;
      }
      this._running = true;
      Date.Timer._enable();
      this._checker = (function(_this) {
        return function() {
          var lastTargetTime, nowTime;
          nowTime = new Date();
          if ((_this.allowsEqual ? nowTime >= _this.targetTime : nowTime > _this.targetTime)) {
            _this._counter++;
            lastTargetTime = _this.targetTime;
            _this.targetTime = Date.Timer._endOfTime;
            return _this.onArrive.fire({
              idealTime: lastTargetTime,
              nowTime: nowTime,
              index: _this._counter - 1
            });
          }
        };
      })(this);
      Date.Timer._onCheck.bind(this._checker);
      return this;
    };

    Timer.prototype.stop = function() {
      if (!this._running) {
        return this;
      }
      this._running = false;
      Date.Timer._onCheck.unbind(this._checker);
      if (Date.Timer._onCheck.getListeners().isEmpty()) {
        Date.Timer._disable();
      }
      return this;
    };

    Timer.prototype.getRunning = function() {
      return this._running;
    };

    Timer.prototype.resetCounter = function() {
      this._counter = 0;
      return this;
    };

    Timer.prototype.getCounter = function() {
      return this._counter;
    };

    return Timer;

  })();

  Date.IntervalTimer = (function(superClass) {
    extend(IntervalTimer, superClass);

    function IntervalTimer(options) {
      var ref, ref1, ref2, ref3, ref4, ref5;
      IntervalTimer.__super__.constructor.call(this, options);
      this.interval = (ref = options != null ? options.interval : void 0) != null ? ref : 1000;
      this.startTime = (ref1 = options != null ? options.startTime : void 0) != null ? ref1 : new Date();
      this.endTime = (ref2 = options != null ? options.endTime : void 0) != null ? ref2 : Date.Timer._endOfTime.subtract(1000);
      this.includesStart = (ref3 = options != null ? options.includesStart : void 0) != null ? ref3 : true;
      this.includesEnd = (ref4 = options != null ? options.includesEnd : void 0) != null ? ref4 : false;
      this.skipsPast = (ref5 = options != null ? options.skipsPast : void 0) != null ? ref5 : false;
      this.targetTime = this.startTime;
      this._started = false;
      this.onStart = eventField();
      this.onArrive.bind((function(_this) {
        return function(event) {
          var now;
          if (_this.interval < Date.Timer.getPrecision() * 2) {
            _this.stop();
            return;
          }
          now = new Date();
          _this.targetTime = _this.skipsPast ? now - (now - event.idealTime) % _this.interval + _this.interval : event.idealTime.add(_this.interval);
          if (!_this._started) {
            _this._started = true;
            if (!_this.includesStart) {
              _this.resetCounter();
              event.blocksListeners = true;
            }
            _this.onStart.fire();
          }
          if ((_this.includesEnd ? _this.targetTime > _this.endTime : _this.targetTime >= _this.endTime)) {
            return _this.stop();
          }
        };
      })(this));
    }

    return IntervalTimer;

  })(Date.Timer);

  Date.Observer = (function(superClass) {
    extend(Observer, superClass);

    Observer._error = new Error();

    function Observer() {
      var clonedOptions, fun, options, ref;
      ref = typeof arguments[0] === "object" ? [arguments[0], arguments[1]] : [arguments[1], arguments[0]], options = ref[0], fun = ref[1];
      clonedOptions = options != null ? Object.clone(options) : {};
      if (clonedOptions.interval == null) {
        clonedOptions.interval = 100;
      }
      if (clonedOptions.skipsPast == null) {
        clonedOptions.skipsPast = true;
      }
      Observer.__super__.constructor.call(this, clonedOptions);
      this._fun = fun;
      this.onChange = eventField();
      this.onUpdate = eventField();
      this.onArrive.bind((function(_this) {
        return function() {
          var newValue;
          newValue = (function() {
            try {
              return this._fun();
            } catch (_error) {
              return Date.Observer._error;
            }
          }).call(_this);
          if (newValue === void 0) {
            newValue = Date.Observer._error;
          }
          if (_this._oldValue === void 0 || !Object.is(newValue, _this._oldValue)) {
            _this.onUpdate.fire({
              value: newValue
            });
            if (_this._oldValue !== void 0) {
              _this.onChange.fire({
                oldValue: _this._oldValue,
                newValue: newValue
              });
            }
            return _this._oldValue = newValue;
          }
        };
      })(this));
    }

    return Observer;

  })(Date.IntervalTimer);

  mate.web = web = {};

  web.request = function(options) {
    return new Promise(function(resolve, reject) {
      var body, ex, headerFields, method, ref, ref1, ref2, ref3, responseBodyType, timeout, uri;
      try {
        method = options.method;
        uri = options.uri;
        headerFields = (ref = options.headerFields) != null ? ref : null;
        body = (ref1 = options.body) != null ? ref1 : null;
        timeout = (ref2 = options.timeout) != null ? ref2 : null;
        responseBodyType = (ref3 = options.responseBodyType) != null ? ref3 : "text";
        if (method == null) {
          fail();
        }
        if (uri == null) {
          fail();
        }
        if ((body != null) && typeof body !== "string" && !(body instanceof Uint8Array)) {
          fail();
        }
        if (responseBodyType !== "binary" && responseBodyType !== "text" && responseBodyType !== "json") {
          fail();
        }
        if (mate.environmentType === "browser") {
          return (function() {
            var xhr;
            xhr = new XMLHttpRequest();
            xhr.open(method, uri);
            if (headerFields != null) {
              Object.forEach(headerFields, function(key, value) {
                return xhr.setRequestHeader(key, value);
              });
            }
            xhr.responseType = responseBodyType === "binary" ? "arraybuffer" : responseBodyType === "text" ? "text" : responseBodyType === "json" ? "text" : void 0;
            xhr.timeout = timeout != null ? timeout : 0;
            xhr.onload = function() {
              var ref4, response;
              response = {
                statusCode: xhr.status,
                statusReason: xhr.statusText,
                headerFields: xhr.getAllResponseHeaders().stripTrailingNewline().deepSplit("\r\n", ": ", 1).map(function(field) {
                  return [field[0].toLowerCase(), field[1]];
                }).toObject(),
                body: responseBodyType === "binary" ? new Uint8Array(xhr.response) : responseBodyType === "text" ? xhr.response : responseBodyType === "json" ? JSON.parse(xhr.response) : void 0
              };
              if ((200 <= (ref4 = response.statusCode) && ref4 < 300)) {
                return resolve(response);
              } else {
                return reject(response);
              }
            };
            xhr.onerror = function() {
              return reject(new Error());
            };
            xhr.ontimeout = function() {
              return reject(new Error("timeout"));
            };
            return xhr.send(body);
          })();
        } else {
          return (function() {
            var http, httpOrHttps, https, parsedUri, rawRequest, urlMod;
            http = module.require("http");
            https = module.require("https");
            urlMod = module.require("url");
            parsedUri = urlMod.parse(uri);
            httpOrHttps = parsedUri.protocol === "https:" ? https : http;
            rawRequest = httpOrHttps.request({
              method: method,
              hostname: parsedUri.hostname,
              port: parsedUri.port,
              path: parsedUri.path,
              headers: headerFields
            }, function(rawResponse) {
              var data;
              data = new Buffer(0);
              rawResponse.on("data", function(chunk) {
                return data = Buffer.concat([data, chunk]);
              });
              return rawResponse.on("end", function() {
                var ref4, response;
                response = {
                  statusCode: rawResponse.statusCode,
                  statusReason: rawResponse.statusMessage,
                  headerFields: rawResponse.headers,
                  body: responseBodyType === "binary" ? new Uint8Array(data) : responseBodyType === "text" ? data.toString() : responseBodyType === "json" ? JSON.parse(data.toString()) : void 0
                };
                if ((200 <= (ref4 = response.statusCode) && ref4 < 300)) {
                  return resolve(response);
                } else {
                  return reject(response);
                }
              });
            });
            if (timeout != null) {
              rawRequest.setTimeout(timeout, function() {
                rawRequest.abort();
                return reject(new Error("timeout"));
              });
            }
            return rawRequest.on("error", function(e) {
              return reject(new Error());
            }).end(body instanceof Uint8Array ? new Buffer(body) : body);
          })();
        }
      } catch (_error) {
        ex = _error;
        return reject(ex);
      }
    });
  };

  web.get = function(uri, options) {
    var actualOptions;
    actualOptions = {
      method: "GET",
      uri: uri
    };
    Object.assign(actualOptions, options);
    return web.request(actualOptions);
  };

  web.jsonGet = function(uri, options) {
    var actualOptions;
    actualOptions = {
      method: "GET",
      uri: uri,
      responseBodyType: "json"
    };
    Object.assign(actualOptions, options);
    return web.request(actualOptions);
  };

  web.binaryGet = function(uri, options) {
    var actualOptions;
    actualOptions = {
      method: "GET",
      uri: uri,
      responseBodyType: "binary"
    };
    Object.assign(actualOptions, options);
    return web.request(actualOptions);
  };

  web.post = function(uri, body, options) {
    var actualOptions;
    actualOptions = {
      method: "POST",
      uri: uri,
      body: body
    };
    Object.assign(actualOptions, options);
    return web.request(actualOptions);
  };

  web.jsonPost = function(uri, body, options) {
    var actualOptions;
    actualOptions = {
      method: "POST",
      uri: uri,
      headerFields: {
        "Content-Type": "application/json"
      },
      body: JSON.stringify(body),
      responseBodyType: "json"
    };
    Object.assign(actualOptions, options);
    return web.request(actualOptions);
  };

  module.exports = mate;

}).call(this);
